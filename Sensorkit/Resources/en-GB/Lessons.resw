<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Lesson0" xml:space="preserve">
    <value>-Welcome#This application provides tutorials to build certain circuits with the SunFounder's Sensorkit. If you run this program on the Raspberry Pi B+ you also have the possibility to run lessons.#Please note that the GPIO0 - pin wasn't accessable on the system, so other pins were used. The pictures don't include that change.#_First Steps#This is our GPIO Extension Board and GPIO cable.#img:0GpioBoardCable.jpg#You must connect the GPIO cable to the Raspberry Pi B+ like this:#img:0GpioCableConnect.jpg#After connection, as shown below:#img:0GpioCableConnection.jpg#</value>
  </data>
  <data name="lesson1" xml:space="preserve">
    <value>Hall Sensor#_Introduction#Based on hall effect, a hall sensor is a sensor that varies its output voltage in response to a magnetic field. Hall sensors are used for proximity switching, positioning, speed detection, and current sensing applications.#Hall sensors can be categorized into linear Hall sensors and switch Hall sensors. A switch Hall sensor consists of voltage regulator, Hall element, differential amplifier, Schmitt trigger, and output terminal. It outputs digital values. Linear Hall sensor consists of a Hall element, linear amplifier, and emitter follower, it outputs analog values.#There are three different types of hall sensor modules in this kit (as shown below): linear hall sensor which outputs analog signals, switch hall sensor which outputs digital signals. If we add a comparator on the basis of linear hall sensor, it will be able to output both analog and digital signals.#img:1Components.jpg#_Components#- 1*Raspberry Pi B+#- 1*Breadboard#- 1*Network cable (or USB wireless network adapter)#- 1*Linear sensor module#- 1*Two-color Common-Cathode LED module#- 1*Switch hall module#- Several jumper wires#_Experimental Principles#Hall effect#Hall effects is a kind of electromagnetic effect. It was discovered by Edwin Hall in 1879 when he was researching conductive mechanism about metals. When a current is perpendicular to external magnetic field and flows through a conductor, a potential difference will be generated on the two surfaces of the conductor that is parallel to the direction of the magnetic field and the current. This phenomenon is Hall effect.#img:1Halleffect.jpg#Hall sensor#A hall sensor is a kind of magnetic field sensor based on hall effect.#Electricity carried through a conductor will produce a magnetic field that varies with current, and a Hall sensor can be used to measure the current without interrupting the circuit. Typically, the sensor is integrated with a wound core or permanent magnet that surrounds the conductor to be measured.#_Experimental Procedures#For switch Hall sensor, please perform the following steps#ToDo: Connect the circuit#Connect Raspberry Pi B+ GPIO2 to pin S on Switch Hall Module#Connect Raspberry Pi B+ GPIO1 to pin S on Double Color LED Module#Connect Raspberry Pi B+ GND to Switch Hall Module GND and double Color LED Module GND#Connect Raspberry Pi B+ pin 3.3V to pin ‘+’ of Switch Hall Module#If a magnet approaches the Switch Hall sensor, a message is printed on the screen, and the LED will light up.#img:1HallFinal.jpg#For linear Hall sensor, please perform the following steps#ToDo: Connect the circuit#img:1LinearHall.jpg#Connect pin S on Linear Hall sensor to pin CH0 on ADC0832#Start it, if a magnet approaches the analog Hall sensor, the value printed on the screen will increase.#img:1LinearFinal.jpg#For linear Hall sensor (added a comparator), please perform the following steps#ToDo: Connect the circuit#Connect pin AO on Linear Hall sensor to pin CH0 on ADC0832#Start it, if a magnet approaches the linear Hall sensor, the indicator light on the linear Hall sensor will light up, and at the same time, current intensity of magnetic field will be printed on the screen.#img:1LinearComFinal.jpg#</value>
  </data>
  <data name="lesson10" xml:space="preserve">
    <value>Analog-temperature Sensor#_Introduction#A thermistor is the core component of an analog-temperature sensor. There are two kinds of analog-temperature sensors in this kit (as shown below). In this lesson, we take the left one for example.#img:10Components.jpg#_Components#- 1*Raspberry Pi B+#- 1*Breadboard#- 1*Network cable (or USB wireless network adapter)#- 1*Analog-temperature Sensor module#- 1*ADC0832#- Several jumper wires#_Experimental Principle#This module is based on thermistor principle, whose resistance varies significantly with ambient temperature. When the temperature increases, the thermistor resistance decreases; when the temperature decreases, the thermistor resistance increases. It can detect surrounding temperature changes in real time. In the experiment, we need to use an analog-digital converter ADC0832 to convert analog signal into digital signal.#_Experimental Procedures#ToDo: Connect the circuit#img:10ADC.jpg#Analog-temperature Sensor module ADC0832#‘s’ ------------------------------------------ CH0#‘+’ --------------------------------------------- 3.3V#‘-’ --------------------------------------------- GND#Press play, if you touch the thermistor, you can see current temperature value displayed on the screen change accordingly.#img:10Final1.jpg#Or with the other temperature sensor:#img:10Final2.jpg#</value>
  </data>
  <data name="Lesson11" xml:space="preserve">
    <value>Buzzer#_Introduction#Buzzers can be categorized as active and passive buzzers (See the following picture).#img:11Components.jpg#_Components#- 1*Raspberry Pi B+#- 1*Network cable (or USB wireless network adapter)#- 1*Passive buzzer module#- 1*Active buzzer module#- Several jumper wires#_Experimental Principle#When we place the pins of two buzzers upwards, we can see the one with green circuit board is a passive buzzer, while the one without circuit board instead of enclosing with black wax is an active buzzer.#img:11Buzzers.jpg#The difference between an active buzzer and a passive buzzer is:#The active buzzer has built-in oscillating source, so it will make sounds as long as it is wired up. While the passive buzzer does not have oscillating source, so it will not tweet if you use DC signals, instead you must use square waves whose frequencies are between 2K and 5K to drive it. The active buzzer is often more expensive than the passive because multiple built-in oscillating circuits exist.#_Experimental Procedures#Active Buzzer#Note: The active buzzer has built-in oscillating source, so it will make sounds as long as it is wired up. But it can only make sounds with fixed frequency.#Step 1: Connect the circuit#Raspberry Pi B+ Active buzzer module#GND -------------------------------------- ‘-’#GPIO1 ------------------------------------- ‘s’#Press play, you can hear the active buzzer make ticking sounds.#Passive Buzzer#The passive buzzer requires a softTone libary which is only available for linux.</value>
  </data>
  <data name="Lesson12" xml:space="preserve">
    <value>Button#_Introduction#In this lesson, we will learn how to use buttons.#img:12Components.jpg#_Components#- 1*Raspberry Pi B+#- 1*Breadboard#- 1*Network cable (or USB wireless network adapter)#- 1*Button module#- 1*Two-color Common-Cathode LED module#- Several jumper wires#_Experimental Principle#img:12Connection.jpg#Use a normally open button as an input device of Raspberry Pi B+, when the button is pressed, the GPIO (General Purpose Input/Output) connected to the button will turn into low level (0V). We can detect the state of the GPIO connected to the button through programming. That is, if the GPIO turns into low level, it means the button is pressed, you can run the corresponding code according to this condition. In this experiment, we will print a string on the screen, and control a LED.#_Experimental Procedures#Connect the circuit#Button module Raspberry Pi B+#‘s’ ----------------------- GPIO2#‘+’ ----------------------- 3.3V#‘-’ ------------------------ GND#Two-color LED module connection: connect pin ‘R’ on two-color LED module to GPIO1 on Raspberry Pi B+; connect GND on two-color LED module to GND on Raspberry Pi B+#Press Enter, if you press the button, you will see a string “Button is pressed” displayed on the screen, and the state of LED will be switched (ON/OFF).#img:12Final.jpg#</value>
  </data>
  <data name="Lesson13" xml:space="preserve">
    <value>Photo-interrupter#_Introduction#A photo-interrupter (as shown below) is a sensor that arranges light-emitting component and light-receiving component face-to-face and packages them together. It uses the principle that light will be interrupted when there is an object passing through the sensor to realize detection function. Photo-interrupters are widely used in speed measurement.#img:13Components.jpg#_Components#- 1*Raspberry Pi B+#- 1*Breadboard#- 1*Network cable (or USB wireless network adapter)#- 1*Two-color Common-Cathode LED module#- 1*Photo-interrupter module#- Several jumper wires#_Experimental Principle#Well, basically a photo-interrupter consists of two parts: transmitter and receiver. Transmitter emits light (it could be, for example, an LED or a laser) and that light goes to receiver. If that light beam between transmitter and receiver is interrupted by some obstacles, and receiver detects no incoming light even for a brief moment – the output level will change. In this experiment, we will turn an LED on or off by this change.#_Experimental Procedures#Connect the circuit#Photo-interrupter module Raspberry Pi B+#‘s’ ----------------------------------- GPIO2#‘+’ ----------------------------------- 3.3V#‘-’ ------------------------------------ GND#Two-color LED module connection: connect pin ‘R’ on two-color LED module to GPIO1 on Raspberry Pi B+; connect GND on two-color LED module to GND on Raspberry Pi B+#Press play, if you break incoming light with a piece of paper, you will see the LED turned on and a string “led on” will be printed on the screen; if you remove the paper, you will see the LED turned off and a string “led off” will be printed on the screen.#img:13Final.jpg#</value>
  </data>
  <data name="lesson1args" xml:space="preserve">
    <value>0 = Switch Hall Sensor, 1 = Linear Hall Sensor, 2 =Linear Hall Sensor (comparator)</value>
  </data>
  <data name="lesson2" xml:space="preserve">
    <value>RGB LED#_Introduction#There are two kinds of packages for RGB LED (as shown below) in this kit. One is Surface Mount Device (SMD) type, and the other is Dual In-line Package (DIP) type.#img:2Components.jpg#RGB LEDs can emit various colors of light. They are manufactured by packaging three LEDs of red, green, and blue into a transparent or semitransparent plastic shell and lead out four pins. The three primary colors of red, green, and blue can be mixed and compose all kinds of colors by brightness, so you can make a RGB LED emit colorful light by controlling the circuit.#_Components#- 1*Raspberry Pi B+#- 1*Network cable (or USB wireless network adapter)#- 1*RGB LED module#- Several jumper wires#_Experimental Principle#The three primary color red, green and blue of a RGB LED can compose various colors by brightness. We can adjust the brightness of RGB LED with PWM technology. Raspberry Pi B+ has only one channel hardware PWM output, but we need three channels to control the RGB LED. As a result, it is difficult to realize with the hardware PWM of Raspberry Pi B+. Do not worry! Fortunately the softPwm library simulates PWM (softPwm) for us with software method. Based on this, we only need to include the header file softPwm.h, then call the API it provided to easily achieve multi-channel PWM output to control the RGB LED to display all kinds of colors. RGB LEDs can be categorized into common anode type and common cathode type.#In this experiment, we use common cathode RGB LED.#_Experimental Procedures#ToDo: Connect the circuit according to the following method#Raspberry Pi B+ RGB LED module#GPIO3 ------------------ R#GPIO1 ------------------ G#GPIO2 ------------------ B#GND ------------------- ‘-’#img:2Final.jpg#</value>
  </data>
  <data name="lesson3" xml:space="preserve">
    <value>Two-color LED#_Introduction#There are two kinds of two-color Common-Cathode LED in this kit. The only difference between them is their LED package size as shown below:#img:3Components.jpg#_Components#- 1*Raspberry Pi B+#- 1*Network cable (or USB wireless network adapter)#- 1*Two-color Common-Cathode LED module#- Several jumper wires#_Experimental Principle#Connect pin Yellow and Red to GPIOs of Raspberry Pi B+, then program the Raspberry Pi B+ to turn the LED on/off, and then use PWM to composite several kinds of colors.#_Experimental Procedures#ToDo: Connect the circuit#Raspberry Pi B+ Two-color Common-Cathode LED module#GPIO2 ------------------------------------- R#GPIO1 ------------------------------------- Y#GND ------------------------------------- G#Start now, you can see the two-color LED appears yellow, red and transition color.#img:3Final.jpg#</value>
  </data>
  <data name="lesson4" xml:space="preserve">
    <value>Shock Switch#_Introduction#A shock switch (as shown below), also called vibration switch, spring switch or shock sensor, is an electronic switch which induces shock force and transfer induced result to circuit device to make the circuit start to work. It contains such main parts as conductive vibration spring, switch ontology, trigger pin, and so on.#img:4Components.jpg#_Experimental Conditions#- 1*Raspberry Pi B+#- 1*Breadboard#- 1*Network cable (or USB wireless network adapter)#- 1*Shock switch module#- 1*Two-color Common-Cathode LED module#- Jumper wires#_Experimental Principle#The main principle of shock switch is that, conductive vibration spring and trigger pin are precisely placed in switch ontology and bond to curing position through adhesive. Normally, the spring and the trigger pin do not contact. Once shook, the spring will shake and contact with trigger pin to conduct and generate trigger signals.#In this experiment, we will use a two-color LED module to indicate shock signals. When the shock switch inducts shock signals, the LED will light up.#_Experimental Procedures#ToDo: Connect the circuit#Shock switch connection: connect pin ‘s’ on Shock switch module to GPIO2 on Raspberry Pi B+; connect GND on Shock switch module to GND on Raspberry Pi B+; connect pin ‘+’ on Shock switch module to 3.3V on Raspberry Pi B+#Two-color LED module connection: connect pin ‘R’ on two-color LED module to GPIO1 on Raspberry Pi B+; connect GND on two-color LED module to GND on Raspberry Pi B+#Start it, if you shake the switch, you will see a message printed on screen, and the LED will light up.#img:4Final.jpg#</value>
  </data>
  <data name="lesson5" xml:space="preserve">
    <value>Knock Sensor#_Introduction#A knock sensor (as shown below) is similar to the shock switch. Just more sensitive. It can feel small amplitude virbration.#img:5Components.jpg#_Components#- 1*Raspberry Pi B+#- 1*Breadboard#- 1*Network cable (or USB wireless network adapter)#- 1*Knock sensor module#- 1*Two-color Common-Cathode LED module#- Several jumper wires#_Experimental Principle#Similar to the shock switch. When you knock the sensor, the two spring leaf will contact and the circuit will conduct. At the same time, pin ‘S’ will output Low. In this experiment, we will judge the knock signal by detecting the output voltage.#In this experiment, we will use a two-color LED module to indicate knock signals. When the knock switch inducts knock signals, the LED will light up.#_Experimental Procedures#ToDo: Connect the circuit#Knock switch connection: connect pin ‘s’ on knock switch module to GPIO2 on Raspberry Pi B+; connect GND on knock switch module to GND on Raspberry Pi B+; connect pin ‘+’ on knock switch module to 3.3V on Raspberry Pi B+.#Two-color LED module connection: connect pin ‘R’ on two-color LED module to GPIO1 on Raspberry Pi B+; connect GND on two-color LED module to GND on Raspberry Pi B+#Start it, if you shake the sensor, pin ‘s’ will output Low and you will see “Detected knocking” displayed on the screen, and the LED will light up.#img:5Final.jpg#</value>
  </data>
  <data name="lesson6" xml:space="preserve">
    <value>Infrared Transmitter#_Introduction#An infrared transmitter (as shown below) is a type of remote control device with remote control function. It can emit rays within a certain range through infrared transmitting tube so as to control signals. Infrared-transmitters are widely used in consumer electronics, industry and communication, etc.#img:6Components.jpg#_Components#- 1*Raspberry Pi B+#- 1*Network cable (or USB wireless network adapter)#- 1*Infrared transmitter module#- Several jumper wires#_Experimental Principle#After connecting the circuit, we will let the module emit infrared rays by programming. Since infrared ray is invisible, so we cannot see it. But we can see it by using a camera.#_Experimental Procedures#ToDo: Connect the circuit#Raspberry Pi B+ Infrared transmitter module#GPIO1 -------------------------------------- ‘s’#GND -------------------------------------- ‘-’#Press play button, then you can see the infrared diode on the module emit infrared rays by a camera.#(Note: Infrared rays are not visible, but can be captured by cameras).#img:6Final.jpg#</value>
  </data>
  <data name="lesson7" xml:space="preserve">
    <value>Laser Transmitter#_Introduction#Laser is widely used in medical treatment, military, and other fields due to its good directivity and energy concentration. In the world of art, laser is widely used in stage to make the effect of shadow and laser holography.#The appearance of a laser-transmit module is shown as below:#img:7Components.jpg#_Components#- 1*Raspberry Pi B+#- 1*Network cable (or USB wireless network adapter)#- 1*Laser-transmitter module#- Several jumper wires#Experimental Principle#A laser is a device that emits light through a process of optical amplification based on the stimulated emission of electromagnetic radiation. The term "laser" originated as an acronym for "light amplification by stimulated emission of radiation". Lasers differ from other sources of light because they emit light coherently. Spatial coherence allows a laser to be focused to a tight spot, enabling applications like laser cutting and lithography. Spatial coherence also allows a laser beam to stay narrow over long distances (collimation), enabling applications such as laser pointers. Lasers can also have high temporal coherence which allows them to have a very narrow spectrum, i.e., they only emit a single color of light. Temporal coherence can be used to produce pulses of light—as short as a femtosecond.#_Experimental Procedures#ToDo: Connect the circuit#Raspberry Pi B+ Laser-transmitter module#GPIO1 -------------------------------------- ‘s’#3.3V --------------------------------------- ‘+’#GND -------------------------------------- ‘GND’#Press Enter, you can see the laser blinking constantly.#Note: Don't look directly at the laser head. It can cause great harm to your eyes.#img:7Final.jpg#</value>
  </data>
  <data name="lesson8" xml:space="preserve">
    <value>Reed Switch#_Introduction#A reed switch (as shown below) is also a sensor used to detect the magnetic field. Hall sensors are generally used to measure intelligent vehicle speed and count assembly lines. While reed switches are often used to detect the existence of magnetic field.#There are two kinds of reed switches in this kit. One, we call it reed switch. The other, we call it mini reed. They have the same principle.#img:8Components.jpg#_Components#- 1*Raspberry Pi B+#- 1*Breadboard#- 1*Network cable (or USB wireless network adapter)#- 1*Reed switch module#- 1*Mini reed module#- 1*Two-color Common-Cathode LED module#- Several jumper wires#_Experimental Principle#A reed switch is a type of switch component that controls by magnetic signals. When magnetic material approaches the reed switch and reaches a certain intensity of magnetic field, the reed switch will close. The “switch” here means dry reed pipe, which is a kind of contact passive electronic switch component with the advantage of simple structure, small size, and ease to control. The shell of a reed switch is commonly a sealed glass pipe in which two iron elastic reed electroplates are equipped and inert gases are filled. Normally, the two reeds made of special materials in the glass tube are separated. However, when a magnetic substance approaches the glass tube, the two reeds in the glass tube are magnetized to attract each other and contact under the function of magnetic field lines. As a result, the two reeds will pull together to connect the circuit connected with the nodes. After external magnetic force disappeared, the two reeds will be separated with each other because they have the same magnetism, so the circuit is also disconnected. Therefore, as a line switch component controlling by magnetic signals, the dry reed pipe can be used as a sensor to count, limit positions and so on. At the same time, it is widely used in a variety of communication devices.#_Experimental Procedures#ToDo: Connect the circuit#Reed switch connection: connect pin DO on Reed switch module to GPIO2 on Raspberry Pi B+; connect GND on Reed switch module to GND on Raspberry Pi B+; connect pin ‘+’ on Reed switch module to 3.3V on Raspberry Pi B+#Two-color LED module connection: connect pin ‘s’ on two-color LED module to GPIO1 on Raspberry Pi B+; connect GND on two-color LED module to GND on Raspberry Pi B+#Press play, if you use magnetic material to approach the reed switch, you will detect that pin DO output high and the LED will light up.#img:8ReedFinal.jpg#_Mini Reed#_Experimental Procedures#Step 1: Connect the circuit#Connect pin ‘s’ on Mini Reed module to GPIO1 on Raspberry Pi B+, other connections are the same with Reed switch module#Press play, you will see the same result.#img:8MiniFinal.jpg#</value>
  </data>
  <data name="lesson8args" xml:space="preserve">
    <value>0 = Reed Switch, 1 = Mini Reed Switch</value>
  </data>
  <data name="lesson9" xml:space="preserve">
    <value>Infrared-Receiver#_Introduction#An infrared-receiver (as shown below) is a type of component which can receive infrared signals and can independently complete infrared ray reception and output compatible with TTL level signals. It has similar size with normal plastic package transistors and is appropriate for all kinds of infrared ray remote control and infrared ray data transmission.#img:9Components.jpg#_Components#- 1*Raspberry Pi B+#- 1*Breadboard#- 1*Network cable (or USB wireless network adapter)#- 1*Infrared-receiver module#- Several jumper wires#_Experimental Principle#Infrared receiving head receives infrared signals.#_Experimental Procedures#Step 1: Connect the circuit#Infrared-receiver module Raspberry Pi B+#‘s’ ---------------------------------------------- ‘GPIO1’#‘+’ ---------------------------------------------- 3.3V#‘-’ ----------------------------------------------- GND#Press play, you will see the LED on the module light up when receiving infrared rays. At the same time, infrared pulses will be printed on the screen.#img:9Final.jpg#</value>
  </data>
  <data name="Lesson14" xml:space="preserve">
    <value>Tilt-Switch#_Introduction#The tilt-switch (as shown below) we use is a ball tilt-switch with a metal ball inside. It is used to detect small angle of inclination.#img:14Components.jpg#_Components#- 1*Raspberry Pi B+#- 1*Breadboard#- 1*Network cable (or USB wireless network adapter)#- 1*Two-color Common-Cathode LED module#- 1*Tilt-switch module#- Several jumper wires#_Experimental Principle#The principle is very simple. It mainly uses the ball in the switch changing with different angle of inclination to achieve the purpose of triggering circuits. When the ball in tilt switch runs from one end to the other end because of external force shaking, the tilt switch will conduct, or it will break.#_Experimental Procedures#Connect the circuit#Tilt-Switch module Raspberry Pi B+#‘s’ ------------------------------- GPIO2#‘+’ ------------------------------ 3.3V#‘-’ ------------------------------- GND#Two-color LED module connection: connect pin ‘R’ on two-color LED module to GPIO1 on Raspberry Pi B+; connect GND on two-color LED module to GND on Raspberry Pi B+#Press play, if you tilt the switch, the state of LED will be switched (ON/OFF).#img:14Final.jpg#</value>
  </data>
  <data name="Lesson15" xml:space="preserve">
    <value>Mercury Switch#_Introduction#Similar to tilt-switch, a mercury switch (as shown below) is used to detect slight large angle of inclinations.#img:15Components.jpg#_Components#- 1*Raspberry Pi B+#- 1*Breadboard#- 1*Network cable (or USB wireless network adapter)#- 1*Mercury switch module#- Several jumper wires#_Experimental Principle#A mercury switch (also known as a mercury tilt switch) is a switch which opens and closes an electrical circuit through a small amount of liquid mercury.#Mercury switches have one or more sets of electrical contacts in a sealed glass envelope which contains a bead of mercury. The envelope may also contain air, an inert gas, or a vacuum. Gravity is constantly pulling the drop of mercury to the lowest point in the envelope. When the switch is tilted in the appropriate direction, the mercury touches a set of contacts, thus completing the electrical circuit through those contacts. Tilting the switch the opposite direction causes the mercury to move away from that set of contacts, thus breaking that circuit.[1] The switch may contain multiple sets of contacts, closing different sets at different angles, allowing, for example, single-pole, double-throw (SPDT) operation.#The difference between a mercury switch and a ball switch:#First, All materials of a ball switch can meet environmental protection requirements, while a mercury switch cannot meet this requirement because of the material itself.#Second, a ball switch conducts by the metal ball connecting with the trigger pin to generate signals. Since the contact area of the ball and the trigger pin is small and the ball can move, flash breaking phenomenon will occur when conduction. However, a mercury switch conducts by mercury contacting with the trigger end. Generally speaking, a mercury switch has more stable conduction effect because of its liquid state and large contact area.#Third, a ball switch has metal shell with good structural strength.#Note: Mercury is harmful to human body and environment. Thus please be careful when using a mercury switch in case breaking out. It should also be properly handled when no longer being used.#_Experimental Procedures#Connect the circuit#Mercury switch module Raspberry Pi B+#‘s’ -------------------------------- GPIO2#‘+’ ------------------------------- 3.3V#‘-’ -------------------------------- GND#Two-color LED module connection: connect pin ‘R’ on two-color LED module to GPIO1 on Raspberry Pi B+; connect GND on two-color LED module to GND on Raspberry Pi B+#Press play, now, when you shake the mercury switch, the state of LED will be switched (ON/OFF).#img:15Final.jpg#</value>
  </data>
  <data name="lesson16" xml:space="preserve">
    <value>Magic Cup#_Introduction#It consists of two same modules, and each module adds a separate LED on the basis of Mercury switch.#img:16Components.jpg#_Components#- 1*Raspberry Pi B+#- 1*Breadboard#- 1*Network cable (or USB wireless network adapter)#- 2*Magic cup module#- Several jumper wires#_Experimental Principle#When one mercury switch tilts, its attached LED will become darker and darker, while the other LED will become brighter and brighter. Just like telepathy.#_Experimental Procedures#Connect the circuit#Magic cup module Raspberry Pi B+#‘L’ -------------------------------- GPIO1#‘S’ -------------------------------- GPIO2#‘+’ -------------------------------- 3.3V#‘G’ --------------------------------- GND#Press play, now, when you tilt Magic cup, you will see the LED on one module go out, while the other LED light up.#img:16Final.jpg#</value>
  </data>
</root>